#---------------------------------------------------------------#
#--------------ENHANCED OAI INGESTION CONFIG--------------------#
#---------------------------------------------------------------#
#
# the various plugins can specify their options, in the form:
#
# oai.harvester.<plugin>.options = <option name>:<human readable option text>, ....
#
oai.harvester.ingest_filter.option = none:No filtering of incoming items
oai.harvester.ingest_filter.option = cristin:Core Cristin types with full-text only

oai.harvester.metadata_update.option = all:Remove all existing metadata and replace completely
oai.harvester.metadata_update.option = cristin:Update only Cristin authority controlled metadata

oai.harvester.bundle_versioning.option = all:Remove all existing bundles and replace completely
oai.harvester.bundle_versioning.option = cristin:Synchronise bitstreams with Cristin

oai.harvester.ingest_workflow.option = archive:All items go directly to the DSpace archive
oai.harvester.ingest_workflow.option = cristin:All items go through the DSpace Workflow

# if the harvester is called in an asynchronous context (such as
# via the scheduler), use this eperson as the acting user.  This should
# be someone with sufficient rights to carry out the harvesting actions
# (so, probably an administrator)
#
oai.admin.eperson = richard

plugin.named.org.dspace.harvest.IngestionWorkflow = org.dspace.harvest.DirectToArchiveIngestionWorkflow = archive

plugin.named.org.dspace.harvest.IngestFilter = org.dspace.harvest.DefaultIngestFilter = none

# Plugins for the new stages of the OAI harvester
#
plugin.named.org.dspace.harvest.IngestionWorkflow = \
  no.uio.duo.CristinIngestionWorkflow = cristin

plugin.named.org.dspace.harvest.MetadataRemover = \
  no.uio.duo.CristinMetadataRemover = cristin

plugin.named.org.dspace.harvest.BundleVersioningStrategy = \
  no.uio.duo.CristinBundleVersioningStrategy = cristin

plugin.named.org.dspace.harvest.IngestFilter = \
  no.uio.duo.CristinIngestFilter = cristin


oai.harvester.metadataformats.cristin_dc = http://www.openarchives.org/OAI/2.0/oai_dc/, Cristin Metadata
oai.harvester.oreSerializationFormat.cristin_ore = http://www.w3.org/2005/Atom

# ------------------------------------------------------------- #
# --------------- FS Integration Config ------------------------#
# --------------------------------------------------------------#

# Crosswalk for the incoming metadata from StudentWeb/FS
#
crosswalk.submission.FS.stylesheet= crosswalks/fs-submission.xsl


# Duo implementation of EmbargoSetter
###########

# if the Duo embargo setter doesn't run, which class should it fall back to invoking
plugin.named.org.dspace.embargo.EmbargoSetter = org.dspace.embargo.DefaultEmbargoSetter=fallback

# if present, limits the embargo setter only to run on items which appear under the
# communities listed below.  Leave uncommented to run on entire DSpace.  If an
# item is considered which does not fall in one of these communities, fall back to the
# embargo setter specified in duo.embargo.fallback
#
# duo.embargo.communities = 123456789/10, 123456789/11

# Add a duo event consumer which will receive Item Install events
#
event.consumer.duo.class = no.uio.duo.DuoEventConsumer
event.consumer.duo.filters = Item+Install|Modify

# Note, if we ever decide to reactivate Modify_Metadata events, you can use the following config
# in place of the line above
# event.consumer.duo.filters = Item+Install|Modify_Metadata|Modify

# Configuration used by the DuoEventConsumer to ensure consistent responses
# to events
#
# Field in which event state information is to be stored
#
duo.state.field = duo.state

# hide the field specified duo.state.field from the non-admin UI
#
metadata.hide.duo.state = true


# Curation Task
##################

plugin.named.org.dspace.curate.CurationTask = no.uio.duo.policy.DuoPolicyCurationTask = duopolicy

curate.ui.tasknames = duopolicy = Apply Duo Policy Pattern


## Student Web
####################

# Which metadata field to use to store the incoming grade information in
#
studentweb.grade.field = fs.grade

# which metadata field to store the embargo type in
#
studentweb.embargo-type.field = fs.embargotype

##  SWORDv2
#####################

swordv2-server.accept-packaging.collection.FSBagIt = http://duo.uio.no/terms/package/FSBagIt
swordv2-server.accept-packaging.item.FSBagIt = http://duo.uio.no/terms/package/FSBagIt


# Configuration Document for the URN Generator
########################################################

# The WSDL for the National Library web service
#
urn.idservice.url = http://www.nb.no/idtjeneste/ws?wsdl

# Name and namespace for National Library webservice
#
urn.idservice.namespace = https://nb.no/idservice/v1.0/
urn.idservice.name = IdService

# Institutional username/password for the National Library web service
urn.idservice.username = username
urn.idservice.password = password

# URN series name for use with the National Library web service
#
urn.idservice.series = URN:NBN:no

# When construcing item and bitstream urls, use these base urls
# MUST end with trailing "/"
#
urn.item.base_url = https://www.duo.uio.no/handle/
urn.bitstream.base_url = https://duo.uio.no/bitstream/

# metadata field in which to store the URN provided by the National Library web service
#
urn.urn.field = dc.identifier.urn

# metadata field in which to store the fulltext/bitstream urls
#
urn.fulltext.field = dc.identifier.fulltext

# Any text to be inserted before the fulltext/bitstream url in the metadata record.  Will be
# separated from the url by a single space
#
urn.fulltext.prefix = Fulltext

# Workflow
##################################

#Selection of workflow framework that will be used in DSpace
# Possible values:
#   originalworkflow = Traditional DSpace Workflow
#   xmlworkflow = New (as of 1.8.0) Configurable Reviewer Workflow
#workflow.workflow.framework=originalworkflow
workflow.workflow.framework=xmlworkflow